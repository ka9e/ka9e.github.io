<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>./leaves(仮)</title><link href="http://ka9e.github.io/" rel="alternate"></link><link href="http://ka9e.github.io/feeds/note.atom.xml" rel="self"></link><id>http://ka9e.github.io/</id><updated>2014-07-11T00:00:00+09:00</updated><entry><title>What's "new" ? #1</title><link href="http://ka9e.github.io/malloc1.html" rel="alternate"></link><updated>2014-07-11T00:00:00+09:00</updated><author><name>ka9e</name></author><id>tag:ka9e.github.io,2014-07-11:malloc1.html</id><summary type="html">&lt;p&gt;C++の &lt;tt class="docutils literal"&gt;new&lt;/tt&gt; の挙動から始めて、メモリ管理に関して二、三回記事を書きたい。
今回はオブジェクト生成のよくある誤解について。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;本題&lt;/h2&gt;
&lt;p&gt;C++における典型的なオブジェクトの生成方法として、次の方法が知られている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;前者 : スタック領域を利用する。関数から抜けると破棄される(自動変数)。&lt;/li&gt;
&lt;li&gt;後者 : ヒープ領域を利用する。 &lt;tt class="docutils literal"&gt;delete&lt;/tt&gt; で明示的に破棄する。動的な割り当て。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Web上の資料では、メモリ上の取り扱いと変数の寿命の二点が着目されて、上記のような説明になることが多い。しかしこれは100%正しいわけではない。&lt;/p&gt;
&lt;p&gt;というのも、自動変数は必ずしもスタック領域に配置されるとは限らないし、
&lt;tt class="docutils literal"&gt;new&lt;/tt&gt; 演算子もヒープ領域から割り当てるよう決められているわけではない &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[1]&lt;/a&gt;。
つまりこれらの挙動は &lt;em&gt;そうなっていることが多い&lt;/em&gt; というだけで、本当は実装に依存しているようだ。&lt;/p&gt;
&lt;p&gt;(とはいえ大半の実装がそうしているなら、そういう挙動を仮定することに問題があるとは思わないが)&lt;/p&gt;
&lt;p&gt;では、このヒープ領域とかスタック領域は一体なんだろうか？
これらの定義は？ 領域の境界は？ 二つを区別して使い分ける意義は？&lt;/p&gt;
&lt;p&gt;この詳細は次回の課題としたい(続く)。&lt;/p&gt;
&lt;p&gt;追伸：&lt;tt class="docutils literal"&gt;C++&lt;/tt&gt; というタグは使えないらしい……。後日原因を調査する。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;江添 亮, &amp;quot;C++11: Syntax and Feature&amp;quot;
URL: &lt;a class="reference external" href="http://ezoeryou.github.io/cpp-book/C++11-Syntax-and-Feature.xhtml"&gt;http://ezoeryou.github.io/cpp-book/C++11-Syntax-and-Feature.xhtml&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="C"></category></entry><entry><title>よく忘れるコマンド</title><link href="http://ka9e.github.io/commands.html" rel="alternate"></link><updated>2014-07-06T00:00:00+09:00</updated><author><name>ka9e</name></author><id>tag:ka9e.github.io,2014-07-06:commands.html</id><summary type="html">&lt;p&gt;それなりの頻度で使うコマンドにも関わらず、使い方を思い出せないものがあるのでメモがてら列挙。&lt;/p&gt;
&lt;p&gt;出典はmanから。&lt;/p&gt;
&lt;div class="section" id="mount"&gt;
&lt;h2&gt;mount&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mount -t FSTYPE DEVICE DIR
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rsync"&gt;
&lt;h2&gt;rsync&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rsync -avn SRC DEST
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;-v, --verbose : 詳細を出力&lt;/li&gt;
&lt;li&gt;-n, --dry-run : 変更を加えない&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="linux"></category></entry></feed>